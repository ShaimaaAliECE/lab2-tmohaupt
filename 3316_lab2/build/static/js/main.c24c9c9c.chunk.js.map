{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Hole","props","className","value","Column","onClick","handleClick","Array","holes","length","map","x","j","checkLine","a","b","c","d","Grid","state","boardState","fill","playerTurn","gameSelected","winner","remainingSquares","this","setState","cID","boardCopy","arr","slice","indexOf","newColumn","reverse","newRemaining","console","log","makeMove","bs","r","checkWinner","alert","selectedGame","winnerMessageStyle","columns","i","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c24c9c9c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nfunction Hole(props){\n  return <div className=\"Hole\"><div className={props.value}><button className=\"piece\" /></div></div>\n}\n\n//create array of holes for each column\nfunction Column(props){\n    return <div onClick={() => props.handleClick()}>\n      {[...Array(props.holes.length)].map((x, j) => \n        <Hole key={j} value={props.holes[j]}></Hole>)}\n      </div>\n }\n\n// check if player connects 4 vertically or horizontally\nfunction checkLine(a,b,c,d) {\n  return ((a !== null) && (a === b) && (a === c) && (a === d));\n}\n\n// check winner\nfunction checkWinner(bs) {\nconsole.log(bs);\n  for (let c = 0; c < 7; c++)\n      for (let r = 0; r < 4; r++)\n          if (checkLine(bs[c][r], bs[c][r+1], bs[c][r+2], bs[c][r+3]))\n              return bs[c][r] + ' wins!'\n  for (let r = 0; r < 6; r++)\n       for (let c = 0; c < 4; c++)\n           if (checkLine(bs[c][r], bs[c+1][r], bs[c+2][r], bs[c+3][r]))\n               return bs[c][r] + ' wins!'\n  return \"\";\n}\n\nclass Grid extends Component {\n  // constructor\n  constructor() {\n    super();\n    this.state = {\n      boardState: new Array(7).fill(new Array(6).fill(null)),\n      playerTurn: 'Red',\n      gameSelected: false,\n      winner: '',\n      remainingSquares: 42,\n    }\n  }\n\n  //board setup\n  selectedGame(){\n    this.setState({\n       gameSelected: true, \n       boardState: new Array(7).fill(new Array(6).fill(null)),\n       remainingSquares: 42,\n    })\n  }\n\n  //change columns when move\n  makeMove(cID){\n    const boardCopy = this.state.boardState.map(function(arr) {\n      return arr.slice();\n    });\n    if (boardCopy[cID].indexOf(null) !== -1) {\n      //change colour\n      let newColumn = boardCopy[cID].reverse()\n      newColumn[newColumn.indexOf(null)] = this.state.playerTurn\n      newColumn.reverse()\n      const newRemaining = this.state.remainingSquares - 1;\n      //create new board\n      this.setState({\n        playerTurn: (this.state.playerTurn === 'Red') ? 'Yellow' : 'Red',\n        boardState: boardCopy,\n        remainingSquares: newRemaining,\n      })\n      console.log(this.state.remainingSquares)\n    }\n  }\n\n  //continue if no winner\n  handleClick(cID) {\n    if(this.state.winner === ''){\n      this.makeMove(cID)\n    }\n  }\n  \n  // check for winner\n  componentDidUpdate(){\n    let winner = checkWinner(this.state.boardState)\n    if (this.state.remainingSquares === 0) {\n      alert(\"All holes are full\");\n      this.selectedGame();\n    }\n    if(this.state.winner !== winner){\n      this.setState({winner: winner})\n    }\n  }\n\n  render(){\n    // put rows together\n    let columns = [...Array(this.state.boardState.length)].map((x, i) => \n      <Column \n          key={i}\n          holes={this.state.boardState[i]}\n          handleClick={() => this.handleClick(i)}\n      ></Column>\n    )\n\n    // display winner message\n    let winnerMessageStyle\n    if(this.state.winner !== \"\"){\n      winnerMessageStyle = \"winnerMessage appear\"\n    } else {\n      winnerMessageStyle = \"winnerMessage\"\n    }\n\n    //Play game button\n    return (\n      <div>\n        {this.state.gameSelected &&\n          <div className=\"Board\">\n            {columns}\n          </div>\n        }\n        <div className={winnerMessageStyle}>{this.state.winner}</div>\n        {(!this.state.gameSelected || this.state.winner !== '') &&\n          <div>\n            <button className=\"playButton\" onClick={() => this.selectedGame()}>Play Game</button>\n          </div>\n        }\n      </div>\n    )\n  }\n}\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Game\">\n          <Grid />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}